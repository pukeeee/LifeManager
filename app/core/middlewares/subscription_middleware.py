from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery
from typing import Callable, Dict, Any, Awaitable
import app.keyboards as kb
from app.core.utils.config import CHANNEL



class SubscriptionMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–∞–Ω–∞–ª"""
    
    async def __call__(
        self,
        handler: Callable[[Message | CallbackQuery, Dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: Dict[str, Any]
    ) -> Any:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –∫–∞–Ω–∞–ª
        
        Args:
            handler: –ù–∞—Å—Ç—É–ø–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
            event: –í—Ö—ñ–¥–Ω–∞ –ø–æ–¥—ñ—è
            data: –î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
        """
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∫–æ–º–∞–Ω–¥—É /start —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—ñ–¥–ø–∏—Å–∫–∏
        if isinstance(event, Message) and event.text and event.text.startswith("/info"):
            return await handler(event, data)
        if isinstance(event, CallbackQuery) and event.data == "check_subscription":
            return await handler(event, data)

        user_id = event.from_user.id
        bot = event.bot

        try:
            member = await bot.get_chat_member(chat_id=CHANNEL, user_id=user_id)
            if member.status not in ["member", "administrator", "creator"]:
                raise ValueError("User is not a channel member")
        except Exception as e:
            print(f"Error in subscription middleware: {e}")
            # –Ø–∫—â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—è, –ø–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É
            if isinstance(event, Message):
                await event.answer(
                    "–î–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏. üëç",
                    reply_markup=await kb.subscriptionKeyboard()
                )
            elif isinstance(event, CallbackQuery):
                # –î–ª—è –∫–æ–ª–±–µ–∫–∞ check_subscription –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–ª–∏–≤–∞—é—á–µ –≤—ñ–∫–Ω–æ
                if event.data == "check_subscription":
                    await event.answer(
                        "–í–∏ –≤—Å–µ —â–µ –Ω–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è.",
                        show_alert=True
                    )
                else:
                    # –î–ª—è —ñ–Ω—à–∏—Ö –∫–æ–ª–±–µ–∫—ñ–≤ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    await event.message.answer(
                        "–î–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏. üëç",
                        reply_markup=await kb.subscriptionKeyboard()
                    )
                    await event.answer() # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–∞—Ä–∏–π –∫–æ–ª–±–µ–∫
            return # –ó—É–ø–∏–Ω—è—î–º–æ –ø–æ–¥–∞–ª—å—à—É –æ–±—Ä–æ–±–∫—É

        # –Ø–∫—â–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É—Å–ø—ñ—à–Ω–∞, –ø–µ—Ä–µ–¥–∞—î–º–æ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É –æ–±—Ä–æ–±–Ω–∏–∫—É
        return await handler(event, data) 